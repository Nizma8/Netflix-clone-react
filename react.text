React(aka React.js or ReactJS) is an open-source front-end JavaScript library that is used for building composable user interfaces, especially for -single-page applications
-React adopts a Declarative approach(telling what to do instead of how to do it)-which means developers describe how the user interface should look based on its current state, and React takes care of updating the DOM (Document Object Model) accordingly. 


1. How does React work?
React creates a virtual DOM. When the state changes in a component it first runs a "diffing" algorithm, which identifies what has changed in the virtual DOM. The second step is reconciliation, where it updates the DOM with the results of diff.

components-React breaks the user interface into small, reusable components.
          -Each component is a self-contained unit that manages its own state and behavior.

1.Virtual DOM - virtual representation of the actual DOM called the Virtual DOM,mirrors the structure of the real DOM.
            -When changes occur in your React component's state or props, React first updates the Virtual DOM rather than making immediate      changes to the real DOM(Efficiency).
            -After updating the Virtual DOM, It compares the current Virtual DOM with the previous one to identify the differences (or "diffs") between them.
            -Reconciliation: Once React identifies the differences between the Virtual DOMs, it calculates the most efficient way to update the actual DOM to reflect these changes. 
           

Actual DOM-   Document Object Model: 
              Slower Updates: (Directly manipulating )
               Limited Efficiency:

2.One-way data flow - React enforces a unidirectional data flow. Data flows from the top-level component down to child components. Parent components pass data to their children via props, and children communicate back to parents through callbacks.


3.Supports server-side rendering which is useful for Search Engine Optimizations(SEO).
4.Follows Unidirectional or one-way data flow or data binding.
5.Uses reusable/composable UI components to develop the view.
2.   component:

Their names always begin with a capital letter.
They return JSX markup.
Reusable Component - you can create components that are composed of other components


3. When to use a Class Component over a Function Component?

After the addition of Hooks(i.e. React 16.8 onwards) it is always recommended to use Function components over Class components in React. Because you could use state, lifecycle methods and other features that were only available in class component present in function component too.

But even there are two reasons to use Class components over Function components.

1.If you need a React functionality whose Function component equivalent is not present yet, like Error Boundaries.
2.In older versions, If the component needs state or lifecycle methods then you need to use class component.


4. Can web browsers read JSX directly? 
Web browsers cannot read JSX directly. This is because they are built to only read regular JS objects and JSX is not a regular JavaScript object 
For a web browser to read a JSX file, the file needs to be transformed into a regular JavaScript object. For this, we use Babel

5. what are props?
Data sharing from parent to child
React components use props to communicate with each other. 
but you can pass any JavaScript value through them, including objects, arrays, and functions.
React component functions accept a single argument, a props object:
Props are not always static.
props are immutable,
you can’t change props. When you need interactivity, you’ll need to set state.


7. Form Component
<input>
<select>
<textarea> 
hese built-in browser components accept user input:because passing the value prop to them makes them controlled.- An input form element whose value is controlled by React in this way is called a controlled component


8. state
object that holds some information that may change over the lifetime of the component
whenever the state object changes, the component re-renders. 

useState Hook-Add state variable to your component.
-useState accepts an initial state and returns an array two values:

The current state.- During the first render, it will match the initialState you have passed.
The set function that lets you update the state to a different value and trigger a re-render.
You can’t call it inside loops or conditions.






















React state: Built in  object
-setstate
Life-cycle-
1.Mounting phase-
-constructor()
-getDerivedStateFromProps()
-render()
-componentDidMount()


2.Updating phase-
  
3.Unmounting phase
3.React Hooks
4.difference between fun and class components-
function component    1.js pure function accept props as an argumnt
                         and return jsx
                      2.No need of render function
                      3. run code from top to bottom , once jsx return it cant be
                         alive again
                      4. Stateless component
                      5. hooks are used
                      6. constructor is not used
                      7.Life cycle method componentDidMount is not used

class componnet-      1.class extends(The extends keyword is used to create a child class of another class (parent).The child class                   inherits all the methods from another class.) from react componet and render function 
                        it return resct element
                      2. Need render function to return jsx
                      3.compnent alive depend on life cycle phase 
                      4.Statelful component
                      5.No need to use hook 
                      6.Use constructor to initialise state
                      7.life  cycle methods are used in class based component 
                      
list
from-Controlled Component-Manged by react Components
    -Uncontrolled Component-mange by dom
Api call
   - Axios Library :return promise
UseEffect
   -
